version: 2

workflows:
  version: 2
  commit:
    jobs:
      - runUnittestsExcludeSQLFunctionsTestsLinux
      - runPostgresUnittestsLinux
      - runMySQLUnittestsLinux
      - runUnittestsExcludeSQLFunctionsTestsMac

commonYAMLStructure:
  - &install_venv_dependencies
    run:
      name: create virtualenv and install python requirements
      command: |
        python3 -m venv venv
        . venv/bin/activate
        pip install -r requirements.txt
  - &install_odbc_driver_linux
    run:
      name: install odbc driver
      command: sudo apt install unixodbc-dev
  - &install_pyodbc
    run:
      name: install pyodbc library
      command: |
        . venv/bin/activate
        pip install pyodbc
  - &install_postgres_cli_linux
    run:
      name: install postgres cli
      command:          |
        sudo apt-get -qy update
        sudo apt-get install postgresql-client
  - &install_postgres_odbc_driver_linux
    run:
      name: install postgres odbc driver
      command: |
        sudo apt-get install odbc-postgresql
  - &install_mysql_cli_linux
    run:
      name: install mysql cli
      command:          |
        sudo apt-get -qy update
        sudo apt-get install default-mysql-client
  - &install_mysql_odbc_driver_linux
    run:
      name: install msql odbc unicode driver
      command: |
        wget https://dev.mysql.com/get/Downloads/Connector-ODBC/8.0/mysql-connector-odbc-8.0.18-linux-debian9-x86-64bit.tar.gz
        tar zxvf mysql-connector-odbc-8.0.18-linux-debian9-x86-64bit.tar.gz
        sudo cp mysql-connector-odbc-8.0.18-linux-debian9-x86-64bit/bin/* /usr/local/bin
        sudo cp mysql-connector-odbc-8.0.18-linux-debian9-x86-64bit/lib/* /usr/local/lib
        sudo chmod 777 /usr/local/lib/libmyodbc*
        sudo myodbc-installer -a -d -n "MySQL ODBC 8.0 Driver" -t "Driver=/usr/local/lib/libmyodbc8w.so"
  - &restore_venv_cache_linux
    restore_cache:
      keys:
        - linux-venv-dependencies-{{ checksum "requirements.txt" }}
        # fallback to using the latest cache if no exact match is found
        - linux-venv-dependencies-
  - &restore_venv_cache_mac
    restore_cache:
      keys:
        - mac-venv-dependencies-{{ checksum "requirements.txt" }}
        # fallback to using the latest cache if no exact match is found
        - mac-venv-dependencies-
  - &save_venv_cache_linux
    save_cache:
      paths:
        - ./venv
      key: linux-venv-dependencies-{{ checksum "requirements.txt" }}
  - &save_venv_cache_mac
    save_cache:
      paths:
        - ./venv
      key: mac-venv-dependencies-{{ checksum "requirements.txt" }}
  - &wait_postgres
    run:
      name: wait for postgres to be ready
      command: |
        for i in `seq 1 10`;
        do
          nc -z localhost 5432 && echo Success && exit 0
          echo -n .
          sleep 1
        done
        echo Failed waiting for Postgres && exit 1
  - &wait_mysql
    run:
      name: wait for mysql to be ready
      command: |
        for i in `seq 1 10`;
        do
          nc -z 127.0.0.1 3306 && echo Success && exit 0
          echo -n .
          sleep 1
        done
        echo Failed waiting for MySQL && exit 1
  - &prepare_data_postgres
    run:
      name: populate data to postgres
      command: |
        psql "$CONNECTION_STRING" -c "DROP TABLE IF EXISTS invoice;"
        psql "$CONNECTION_STRING" -c "CREATE TABLE invoice(
          id serial primary key,
          name VARCHAR(355) not null,
          amount double precision not null,
          \"Remark\" VARCHAR (355)
        );"
        psql "$CONNECTION_STRING" -c "INSERT INTO invoice(name, amount, \"Remark\") VALUES
          ('Johnson, Smith, and Jones Co.', 345.33, 'Pays on time'),
          (E'Sam \"Mad Dog\" Smith', 993.44, NULL),
          ('Barney & Company', 0, E'Great to work with\nand always pays with cash.'),
          (E'Johnson\'s Automotive', 2344, NULL);"
  - &prepare_data_mysql
    run:
      name: populate data to mysql
      command: |
        mysql -h 127.0.0.1 -u test -ptest_pw -D circleci_test -e "DROP TABLE IF EXISTS invoice;"
        mysql -h 127.0.0.1 -u test -ptest_pw -D circleci_test -e "CREATE TABLE invoice(
          id serial primary key,
          name VARCHAR(355) not null,
          amount double precision not null,
          remark VARCHAR (355)
        );"
        mysql -h 127.0.0.1 -u test -ptest_pw -D circleci_test -e "INSERT INTO invoice(name, amount, remark) VALUES
          ('Johnson, Smith, and Jones Co.', 345.33, 'Pays on time'),
          ('Sam \"Mad Dog\" Smith', 993.44, NULL),
          ('Barney & Company', 0, 'Great to work with\nand always pays with cash.'),
          ('Johnson\'s Automotive', 2344, NULL);"
  - &run_unittests_exc_sql_functions_tests
    run:
      name: run all tests execluding sql functions tests
      command: |
        . venv/bin/activate
        python -m tests.test_parser suite tests.utils
        python -m tests.test_parser suite tests.cli
  - &run_postgres_connection_test
    run:
      name: run postgres connection test
      command: |
        . venv/bin/activate
        python -m tests.test_parser case tests.sql_functions.test_connection.TestPostgresConnection
  - &run_postgres_cli_test
    run:
      name: run postgres cli test
      command: |
        . venv/bin/activate
        python -m tests.test_parser case tests.sql_functions.test_cli_functions.TestPostgresCliFunctions
  - &run_mysql_connection_test
    run:
      name: run mysql connection test
      command: |
        . venv/bin/activate
        python -m tests.test_parser case tests.sql_functions.test_connection.TestMySQLConnection
  - &run_mysql_cli_test
    run:
      name: run mysql cli test
      command: |
        . venv/bin/activate
        python -m tests.test_parser case tests.sql_functions.test_cli_functions.TestMySQLCliFunctions
jobs:
  runUnittestsExcludeSQLFunctionsTestsLinux:
    docker:
      - image: circleci/python:3.6

    working_directory: ~/repo

    steps:
      - checkout
      - *restore_venv_cache_linux
      - *install_venv_dependencies
      - *save_venv_cache_linux
      - *run_unittests_exc_sql_functions_tests
      - store_artifacts:
          path: test-reports
          destination: test-reports

  runPostgresUnittestsLinux:
    docker:
      - image: circleci/python:3.6
        environment:
          SQL_SERVER: localhost
          SQL_DATABASE: circleci_test
          SQL_USERNAME: test
          SQL_PASSWORD: test_pw
          CONNECTION_STRING: postgresql://test:test_pw@localhost/circleci_test
      - image: circleci/postgres:9.6
        environment:
          POSTGRES_DB: circleci_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test_pw

    working_directory: ~/repo

    steps:
      - checkout
      - *restore_venv_cache_linux
      - *install_venv_dependencies
      - *save_venv_cache_linux
      - *install_odbc_driver_linux
      - *install_pyodbc
      - *install_postgres_odbc_driver_linux
      - *wait_postgres
      - *run_postgres_connection_test
      - *install_postgres_cli_linux
      - *prepare_data_postgres
      - *run_postgres_cli_test
      - store_artifacts:
          path: test-reports
          destination: test-reports

  runMySQLUnittestsLinux:
    docker:
      - image: circleci/python:3.6-stretch
        environment:
          SQL_SERVER: 127.0.0.1
          SQL_DATABASE: circleci_test
          SQL_USERNAME: test
          SQL_PASSWORD: test_pw
      - image: circleci/mysql:8.0.3
        environment:
          MYSQL_DATABASE: circleci_test
          MYSQL_USER: test
          MYSQL_PASSWORD: test_pw

    working_directory: ~/repo

    steps:
      - checkout
      - *restore_venv_cache_linux
      - *install_venv_dependencies
      - *save_venv_cache_linux
      - *install_odbc_driver_linux
      - *install_pyodbc
      - *install_mysql_odbc_driver_linux
      - *wait_mysql
      - *run_mysql_connection_test
      - *install_mysql_cli_linux
      - *prepare_data_mysql
      - *run_mysql_cli_test
      - store_artifacts:
          path: test-reports
          destination: test-reports

  runUnittestsExcludeSQLFunctionsTestsMac:
    macos:
      xcode: 11.3.0

    working_directory: ~/repo

    steps:
      - checkout
      - *restore_venv_cache_mac
      - *install_venv_dependencies
      - *save_venv_cache_mac
      - *run_unittests_exc_sql_functions_tests
      - store_artifacts:
          path: test-reports
          destination: test-reports
