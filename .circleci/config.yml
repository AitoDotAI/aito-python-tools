version: 2.1

orbs:
  win: circleci/windows@2.2.0

workflows:
  version: 2
  commit:
    jobs:
      - run_dependencies_security_check
      - run_sdk_and_cli_tests_linux_py_36
      - run_sdk_and_cli_tests_linux_py_37:
          requires:
            - run_sdk_and_cli_tests_linux_py_36
      - run_sdk_and_cli_tests_linux_py_38:
          requires:
            - run_sdk_and_cli_tests_linux_py_36
      - run_postgres_tests_linux_py_36
      - run_postgres_tests_linux_py_37:
          requires:
            - run_postgres_tests_linux_py_36
      - run_postgres_tests_linux_py_38:
          requires:
            - run_postgres_tests_linux_py_36
      - run_sdk_and_cli_tests_win_py_36
      - run_sdk_and_cli_tests_win_py_37:
          requires:
            - run_sdk_and_cli_tests_win_py_36
      - run_sdk_and_cli_tests_win_py_38:
          requires:
            - run_sdk_and_cli_tests_win_py_36
      - run_sdk_and_cli_tests_built_package
      - run_postgres_tests_built_package
      - run_alter_instance_db_tests:
          requires:
            - run_sdk_and_cli_tests_linux_py_37
            - run_sdk_and_cli_tests_linux_py_38
            - run_postgres_tests_linux_py_37
            - run_postgres_tests_linux_py_38
            - run_sdk_and_cli_tests_win_py_37
            - run_sdk_and_cli_tests_win_py_38
            - run_sdk_and_cli_tests_built_package
            - run_postgres_tests_built_package
      - build_docs
      - build_and_deploy_to_test_pypi:
          requires:
            - build_docs
            - run_alter_instance_db_tests
          filters:
            branches:
              only: master

commonYAMLStructure:
  - &restore_venv_cache_build_and_test
    restore_cache:
      key: v2-dependencies-{{ checksum "requirements/build.txt" }}-{{ checksum "requirements/test.txt" }}-{{ .Environment.CIRCLE_JOB }}
  - &save_venv_cache_build_and_test
    save_cache:
      paths:
        - ./venv
      key: v2-dependencies-{{ checksum "requirements/build.txt" }}-{{ checksum "requirements/test.txt" }}-{{ .Environment.CIRCLE_JOB }}
  - &create_venv_and_install_build_and_test_dependencies_linux
    run:
      name: create virtualenv and install dependencies
      command: |
        python -m venv venv
        . venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements/build.txt
        pip install -r requirements/test.txt
  - &restore_venv_cache_deploy_and_test
    restore_cache:
      key: v2-dependencies-{{ checksum "requirements/deploy.txt" }}-{{ checksum "requirements/test.txt" }}
  - &save_venv_cache_deploy_and_test
    save_cache:
      paths:
        - ./venv
      key: v2-dependencies-{{ checksum "requirements/deploy.txt" }}-{{ checksum "requirements/test.txt" }}
  - &create_venv_and_install_deploy_and_test_dependencies
    run:
      name: create virtualenv and install dependencies
      command: |
        python -m venv venv
        . venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements/deploy.txt
        pip install -r requirements/test.txt
  - &restore_build_doc_venv_cache
    restore_cache:
      key: v2-dependencies-{{ checksum "requirements/build.txt" }}-{{ checksum "requirements/test.txt" }}-{{ checksum "requirements/docs.txt" }}
  - &save_build_doc_venv_cache
    save_cache:
      paths:
        - ./venv
      key: v2-dependencies-{{ checksum "requirements/build.txt" }}-{{ checksum "requirements/test.txt" }}-{{ checksum "requirements/docs.txt" }}
  - &create_build_doc_venv
    run:
      name: create doc virtualenv and install dependencies
      command: |
        python -m venv venv
        . venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements/build.txt
        pip install -r requirements/test.txt
        pip install -r requirements/docs.txt
  - &install_python_and_build_and_test_dependencies_win
    run:
      name: create virtualenv and install dependencie
      command: |
        nuget install python -Version $env:PYTHON_VERSION -ExcludeVersion -OutputDirectory .
        .\python\tools\python.exe --version
        .\python\tools\python.exe -m pip install virtualenv
        .\python\tools\python.exe -m virtualenv venv
        venv\Scripts\activate.ps1
        python --version
        pip install --upgrade pip
        pip install -r requirements/build.txt
        pip install -r requirements/test.txt
  - &install_odbc_driver_linux
    run:
      name: install odbc driver
      command: |
        sudo apt update
        sudo apt install unixodbc-dev
  - &install_postgres_odbc_driver_linux
    run:
      name: install postgres odbc driver
      command: sudo apt-get install odbc-postgresql
  - &install_pyodbc
    run:
      name: install pyodbc library
      command: |
        . venv/bin/activate
        pip install pyodbc
  - &install_postgres_cli_linux
    run:
      name: install postgres cli
      command:          |
        sudo apt-get -qy update
        sudo apt-get install postgresql-client
  - &wait_postgres
    run:
      name: wait for postgres to be ready
      command: |
        for i in `seq 1 60`;
        do
          nc -z localhost 5432 && echo Success && exit 0
          echo -n .
          sleep 1
        done
        echo Failed waiting for Postgres && exit 1
  - &prepare_data_postgres
    run:
      name: populate data to postgres
      command: |
        psql "$CONNECTION_STRING" -c "DROP TABLE IF EXISTS invoice;"
        psql "$CONNECTION_STRING" -c "CREATE TABLE invoice(
          id serial primary key,
          name VARCHAR(355) not null,
          amount double precision not null,
          \"Remark\" VARCHAR (355)
        );"
        psql "$CONNECTION_STRING" -c "INSERT INTO invoice(name, amount, \"Remark\") VALUES
          ('Johnson, Smith, and Jones Co.', 345.33, 'Pays on time'),
          (E'Sam \"Mad Dog\" Smith', 993.44, NULL),
          ('Barney & Company', 0, E'Great to work with\nand always pays with cash.'),
          (E'Johnson\'s Automotive', 2344, NULL);"
  - &run_sdk_and_cli_tests
    run:
      name: run all tests execluding sql functions tests
      command: |
        [ "$CIRCLE_BRANCH" != master ] && git diff --quiet HEAD origin/master -- . ":!docs" && echo "NO CHANGE - SKIP" && exit 0
        . venv/bin/activate
        python -m tests -v suite sdk
        python -m tests -v suite cli
  - &run_sdk_and_cli_tests_windows
    run:
      name: run all tests execluding sql functions tests
      command: |
        if ($Env:CIRCLE_BRANCH -ne "master") {
          (git diff --quiet HEAD origin/master -- . ":!docs") -and (echo "NO CHANGE - SKIP") -and (exit 0)
        }
        venv\Scripts\activate.ps1
        python -m tests -v suite sdk
        python -m tests -v suite cli
  - &run_postgres_connection_test
    run:
      name: run postgres connection test
      command: |
        [ "$CIRCLE_BRANCH" != master ] && git diff --quiet HEAD origin/master -- . ":!docs" && echo "NO CHANGE - SKIP" && exit 0
        . venv/bin/activate
        python -m tests -v case sql_functions.test_connection.TestPostgresConnection
  - &run_postgres_cli_test
    run:
      name: run postgres cli test
      command: |
        [ "$CIRCLE_BRANCH" != master ] && git diff --quiet HEAD origin/master -- . ":!docs" && echo "NO CHANGE - SKIP" && exit 0
        . venv/bin/activate
        python -m tests -v case sql_functions.test_cli_sql_functions.TestPostgresFunctions
  - &run_alter_db_unittests
    run:
      name: run tests that alter the instance database
      command: |
        [ "$CIRCLE_BRANCH" != master ] && git diff --quiet HEAD origin/master -- . ":!docs" && echo "NO CHANGE - SKIP" && exit 0
        . venv/bin/activate
        python -m tests method sdk.test_api.TestAlterSchemaAPI.test_create_and_delete_database
        python -m tests method cli.test_database_sub_command.TestDatabaseSubCommands.test_delete_and_create_database
  - &store_log_files
    store_artifacts:
      path: ./.logs
  - &build_and_install_package
    run:
      name: build and install package
      command: |
        . venv/bin/activate
        ./scripts/deploy test.pypi --no-publish --bump-version dev --no-check-git-tree
        pip install dist/*.whl
  - &install_and_run_safety_check
    run:
      name: install safety and security check dependencies
      command: |
        . venv/bin/activate
        pip install safety
        safety check

jobs:
  run_dependencies_security_check:
    docker:
      - image: cimg/python:3.11
    working_directory: ~/repo
    steps:
      - checkout
      - *restore_venv_cache_build_and_test
      - *create_venv_and_install_build_and_test_dependencies_linux
      - *save_venv_cache_build_and_test
      - *install_and_run_safety_check

  run_sdk_and_cli_tests_linux_py_36: &run_sdk_and_cli_tests_linux_template
    docker:
      - image: cimg/python:3.11
    working_directory: ~/repo
    steps:
      - checkout
      - *restore_venv_cache_build_and_test
      - *create_venv_and_install_build_and_test_dependencies_linux
      - *save_venv_cache_build_and_test
      - *run_sdk_and_cli_tests
      - *store_log_files

  run_sdk_and_cli_tests_linux_py_37:
    <<: *run_sdk_and_cli_tests_linux_template
    docker:
      - image: circleci/python:3.7

  run_sdk_and_cli_tests_linux_py_38:
    <<: *run_sdk_and_cli_tests_linux_template
    docker:
      - image: circleci/python:3.8

  run_postgres_tests_linux_py_36: &run_postgres_tests_linux_template
    docker:
      - image: cimg/python:3.11
      - image: circleci/postgres:9.6
        environment:
          POSTGRES_DB: circleci_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test_pw
    environment:
      SQL_DRIVER: PostgreSQL Unicode
      SQL_SERVER: localhost
      SQL_DATABASE: circleci_test
      SQL_USERNAME: test
      SQL_PASSWORD: test_pw
      CONNECTION_STRING: postgresql://test:test_pw@localhost/circleci_test
    working_directory: ~/repo
    steps:
      - checkout
      - *install_odbc_driver_linux
      - *install_postgres_odbc_driver_linux
      - *restore_venv_cache_build_and_test
      - *create_venv_and_install_build_and_test_dependencies_linux
      - *install_pyodbc
      - *save_venv_cache_build_and_test
      - *wait_postgres
      - *run_postgres_connection_test
      - *install_postgres_cli_linux
      - *prepare_data_postgres
      - *run_postgres_cli_test
      - *store_log_files

  run_postgres_tests_linux_py_37:
    <<: *run_postgres_tests_linux_template
    docker:
      - image: circleci/python:3.7
      - image: circleci/postgres:9.6
        environment:
          POSTGRES_DB: circleci_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test_pw

  run_postgres_tests_linux_py_38:
    <<: *run_postgres_tests_linux_template
    docker:
      - image: circleci/python:3.8
      - image: circleci/postgres:9.6
        environment:
          POSTGRES_DB: circleci_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test_pw

  run_sdk_and_cli_tests_win_py_36: &run_sdk_and_cli_tests_win_template
    executor:
      name: win/default
    environment:
      PYTHON_VERSION: 3.6.9
    working_directory: ~/repo
    steps:
      - run:
          name: stop git from adding carriage return in windows
          command: git config --global core.autocrlf false
      - checkout
      - *install_python_and_build_and_test_dependencies_win
      - *run_sdk_and_cli_tests_windows
      - *store_log_files

  run_sdk_and_cli_tests_win_py_37:
    <<: *run_sdk_and_cli_tests_win_template
    environment:
      PYTHON_VERSION: 3.7.5

  run_sdk_and_cli_tests_win_py_38:
    <<: *run_sdk_and_cli_tests_win_template
    environment:
      PYTHON_VERSION: 3.8.0

  run_sdk_and_cli_tests_built_package:
    docker:
      - image: cimg/python:3.11
    environment:
      TEST_BUILT_PACKAGE: True
    working_directory: ~/repo
    steps:
      - checkout
      - *restore_venv_cache_deploy_and_test
      - *create_venv_and_install_deploy_and_test_dependencies
      - *save_venv_cache_deploy_and_test
      - *build_and_install_package
      - *run_sdk_and_cli_tests
      - *store_log_files

  run_postgres_tests_built_package:
    docker:
      - image: cimg/python:3.11
      - image: cimg/postgres:13.20
        environment:
          POSTGRES_DB: circleci_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test_pw
    environment:
      SQL_DRIVER: PostgreSQL Unicode
      SQL_SERVER: localhost
      SQL_DATABASE: circleci_test
      SQL_USERNAME: test
      SQL_PASSWORD: test_pw
      CONNECTION_STRING: postgresql://test:test_pw@localhost/circleci_test
      TEST_BUILT_PACKAGE: True
    working_directory: ~/repo
    steps:
      - checkout
      - *restore_venv_cache_deploy_and_test
      - *create_venv_and_install_deploy_and_test_dependencies
      - *save_venv_cache_deploy_and_test
      - *build_and_install_package
      - *install_odbc_driver_linux
      - *install_postgres_odbc_driver_linux
      - *install_pyodbc
      - *wait_postgres
      - *run_postgres_connection_test
      - *install_postgres_cli_linux
      - *prepare_data_postgres
      - *run_postgres_cli_test
      - *store_log_files

  run_alter_instance_db_tests:
    docker:
      - image: cimg/python:3.11
    working_directory: ~/repo
    environment:
      RUN_ALTER_INSTANCE_DB_TESTS: True
    steps:
      - checkout
      - *restore_venv_cache_build_and_test
      - *create_venv_and_install_build_and_test_dependencies_linux
      - *save_venv_cache_build_and_test
      - *run_alter_db_unittests
      - *store_log_files

  build_docs:
    docker:
      - image: cimg/python:3.11
    working_directory: ~/repo
    steps:
      - checkout
      - *restore_build_doc_venv_cache
      - *create_build_doc_venv
      - *save_build_doc_venv_cache
      - run:
          name: run inline docs tests
          command: |
            . venv/bin/activate
            python -m tests -v suite inline_docs
      - run:
          name: run doc test in docs file
          command: |
            . venv/bin/activate
            cd docs
            curl -o reddit_sample.csv https://raw.githubusercontent.com/AitoDotAI/kickstart/master/reddit_sample.csv
            export SPHINX_DISABLE_MOCK_REQUIREMENTS=TRUE
            make doctest
      - run:
          name: build docs
          command: |
            [ "$CIRCLE_BRANCH" != master ] && git diff --quiet HEAD origin/master -- docs && echo "NO CHANGE" && exit 0
            . venv/bin/activate
            ./scripts/build_docs.sh
      - store_artifacts:
          path: ./docs/build

  build_and_deploy_to_test_pypi:
    docker:
      - image: cimg/python:3.11
    working_directory: ~/repo
    steps:
      - checkout
      - *restore_venv_cache_deploy_and_test
      - *create_venv_and_install_deploy_and_test_dependencies
      - *save_venv_cache_deploy_and_test
      - run:
          name: build package and deploy to test pypi only if there is any changes to the aito dir
          command: |
            [ "$CIRCLE_BRANCH" != master ] && git diff --quiet HEAD origin/master -- aito && echo "NO CHANGE" && exit 0
            . venv/bin/activate
            ./scripts/deploy test.pypi -b dev --no-check-git-tree
      - store_artifacts:
          path: ./dist
